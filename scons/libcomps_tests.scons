# vim: set ft=python:
import os
import os.path
import glob
import shutil
import sys

Import("SCONS_ROOT", "env", "libcomps", "libcomps_include_path", "libcomps_path")

local_env = env.Clone(CPP_PATH=[libcomps_include_path])

local_env.Alias('libcomps', libcomps)

c_tests_path = "build_tests"
local_env.VariantDir(c_tests_path,
                     os.path.join(SCONS_ROOT,"../libcomps/tests/"), duplicate=0)

c_tests = {#"testobjrtree": {"files": "check_objrtree.c check_utils.c",
           #                  "libs": ["comps", "check"]},
           #"testrtree": {"files":  "check_rtree.c check_utils.c",
           #              "libs": ["comps", "check"]},
           #"testbrtree": {"files": "check_brtree.c check_utils.c",
           #               "libs": ["comps", "check"]},
           "testparse": {"files": "check_parse.c check_utils.c",
                         "libs": ["comps", "expat", "check"]},
           "testcomps": {"files": "check_comps.c",
                         "libs": ["comps", "check"]},
           "testvalidate": {"files": "check_validate.c",
                            "libs": ["comps", "check"]}
            }

run_env = local_env.Clone()
run_env.PrependENVPath('LD_LIBRARY_PATH', libcomps_path)

test_files = glob.glob(os.path.join(SCONS_ROOT, "../libcomps/tests/*.xml")) +\
             glob.glob(os.path.join(SCONS_ROOT, "../libcomps/tests/*.dtd")) +\
             glob.glob(os.path.join(SCONS_ROOT, "../libcomps/tests/*.txt"))

test_files_target = "c_tests_files/"
mktgt = Mkdir(test_files_target)
local_env.Alias("mktgt", mktgt)

test_files_dst = []
for f in test_files:
    test_files_dst.append(os.path.join(test_files_target, os.path.basename(f)))
    ret = env.CopyAs(test_files_dst[-1], f)

tests = []

for target, values in c_tests.iteritems():
    tests.append({})
    tests[-1]["objs"] = []
    tests[-1]["out"] = None
    tests[-1]["run"] = None

    for x in Split(values["files"]):
        tests[-1]["objs"].append(run_env.Object(os.path.join(c_tests_path, x)))

    tests[-1]["out"] = run_env.Program("c_tests/%s" % target,
                                          tests[-1]["objs"],
                                          LIBS=values["libs"],
                                          LIBPATH=[libcomps_path])
    local_env.Depends(tests[-1]["out"], libcomps)

    tests[-1]["run"] = run_env.Command("run_%s" % tests[-1]["out"][0].path,
                                       [tests[-1]["out"]],
                                       tests[-1]["out"][0].abspath,
                                       chdir=os.path.join(env["LIBCOMPS_TESTS"],
                                                          test_files_target))
    local_env.Depends(tests[-1]["run"], test_files_target)

    local_env.Alias("run_%s" % target, tests[-1]["run"])
    local_env.Depends("ctests_run", "run_%s" % target)

ctests_run = [x["run"] for x in tests]
local_env.Alias("ctests_run", ctests_run)
local_env.Export("ctests_run")
AlwaysBuild("ctests_run")
