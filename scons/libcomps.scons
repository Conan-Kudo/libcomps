# vim: set ft=python:
import json
import os.path
import glob

Import("SCONS_ROOT", "env", #"libcomps_VERSION_MAJOR","libcomps_VERSION_MINOR",
                            # "libcomps_RELEASE", "libcomps_VERSION_PATCH",
                             "INSTALL_LIB_PATH", "INSTALL_LIB64_PATH",
                             "INSTALL_BIN_PATH", "INSTALL_SHARE_PATH",
                             "INSTALL_INC_PATH")

libcomps_VERSION_MAJOR = env["libcomps_VERSION_MAJOR"]
libcomps_VERSION_MINOR = env["libcomps_VERSION_MINOR"]
libcomps_RELEASE = env["libcomps_RELEASE"]
libcomps_VERSION_PATCH = env["libcomps_VERSION_PATCH"]

local_env = env.Clone()

TGTS_DIR = "os_files"
TGTS_DIR_FORM = "os_files/%s"

local_env.VariantDir(TGTS_DIR,
                     os.path.join(SCONS_ROOT, "../libcomps/src/"), duplicate=0)

comps_files = """ comps_doc.c comps_docgroup.c comps_doccategory.c
                  comps_docenv.c comps_docpackage.c comps_docgroupid.c
                  comps_obj.c comps_mm.c
                  comps_hslist.c comps_dict.c
                  comps_objradix.c comps_objmradix.c comps_objdict.c
                  comps_objlist.c
                  comps_elem.c comps_radix.c comps_mradix.c comps_bradix.c
                  comps_set.c comps_parse.c comps_log.c comps_default.c
                  comps_utils.c comps_validate.c
                  comps_log_codes.c
                  comps_types.c
"""
comps_files_fullp = [TGTS_DIR_FORM % x for x in comps_files.split() if x]
libcomps_include_path = env.Dir("libcomps-inc").abspath
#os.path.abspath(os.path.join(SCONS_ROOT,
#                                                     "../libcomps/src/"))

libcomps_build = local_env.SharedLibrary("lib_comps/comps",
                       comps_files_fullp,
                       SHLIB_VERSION="%s.%s.%s" % (libcomps_VERSION_MAJOR,
                                                   libcomps_VERSION_MINOR,
                                                   libcomps_VERSION_PATCH),
                       SHLIBSUFFIX = '.so.$SHLIB_VERSION',
                       LIBS=["expat", "libxml2"],
                       )

libcomps_link = env.Command('lib_comps/libcomps.so',
                            libcomps_build, 'ln -s ${SOURCE.file} $TARGET')

libcomps = [libcomps_build, libcomps_link]

HEADS = glob.glob(os.path.join(SCONS_ROOT, "../libcomps/src/*.h"))
#print "libcomps heads:", HEADS
heads_links = []
for x in HEADS:
    heads_links.append(env.Command(os.path.join(libcomps_include_path,
                                                "libcomps",
                                                os.path.basename(x)),
                                  os.path.realpath(x),
                                  'ln -s ${SOURCE.abspath} $TARGET'))

print "INSTALL_INC_PATH", INSTALL_INC_PATH
print os.path.join(INSTALL_INC_PATH, "libcomps")
libcomps_install = [local_env.Install(INSTALL_LIB64_PATH,
                                      libcomps),
                    local_env.Install(os.path.join(INSTALL_INC_PATH,
                                                   "libcomps"), HEADS)]
#libcomps_install = []

local_env.Depends(libcomps, heads_links)
local_env.Depends(libcomps_link, libcomps_build)
local_env.Depends(libcomps_install, [libcomps, libcomps_link])

libcomps_path = os.path.dirname(libcomps_build.data[0].abspath)

Export("libcomps", "libcomps_install", "libcomps_include_path", "libcomps_path")
